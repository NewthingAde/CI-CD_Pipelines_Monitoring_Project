version: 2.1
orbs: 
  slack: circleci/slack@4.8.3

commands:

  create-dotenv-file:
    description: Create .env file
    steps:
      - run:
          name: Add env vars to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"

  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string  
    steps:
      - run:
          name: Echo workflow ID that is going be be destroyed
          when: on_fail
          command: echo "WorkflowID=${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy backend stack
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflowID >> --recursive
            aws s3 rb s3://udapeople-<< parameters.workflowID >> --force
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflowID >>
      - run:
          name: Destroy frontend stack
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflowID >>
  
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string      
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/migration_${CIRCLE_WORKFLOW_ID:0:7}
            echo $SUCCESS
            if(( "$SUCCESS"== 1 ));
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: fromt-end build
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: front-end build
          command: |
            cd backend
            npm install
            npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build-cache]
      - run: 
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force

  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run: 
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: Install tar and zip utilities
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/backend.yml \
              --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
             aws cloudformation deploy \
              --template-file ./.circleci/files/frontend.yml \
              --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |                
            BACKEND_IP=$(curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/migration_${CIRCLE_WORKFLOW_ID:0:7}) 
            echo ${BACKEND_IP} >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7} 
  
  configure-infrastructure:
    docker:
      # Docker image that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "22:48:af:fd:76:af:49:65:7c:10:4a:68:63:df:9e:11"
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            pip install awscli
      - create-dotenv-file
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}        
  
  run-migrations:
    docker:
      - image: circleci/node:14.18.1
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build-cache]
      - run:
          name: Run database migration
          command: |
            cd backend
            npm install
            echo "run migration ..."
            npm run migrations > migrations_dump.txt
            echo "migrations dump content ..."
            cat migrations_dump.txt
      - run:
          name: Send database migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}    


  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            
            cd frontend
            yum install -y curl tar gzip
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
            node --version
            npm --version
    
      - run:
          name: Get backend url and setup environment variables
          command: |
            BACKEND_IP=$(curl https://kvdb.io/Nucr3yB6RM75Sz5neM8QEo/migration_${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}      
                    
  deploy-backend:
    docker:
      # Docker image that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: 
            - "22:48:af:fd:76:af:49:65:7c:10:4a:68:63:df:9e:11"
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            apk add --no-cache curl
            apk add --no-cache openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - create-dotenv-file
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is url"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7} 
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest 
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk --no-cache add curl
            apk add --update npm
            apk add --no-cache python3 py3-pip \
              && pip3 install --upgrade pip \
              && pip install awscli
      - create-dotenv-file
      - run:
          name: Backend smoke test.
          command: |
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              return 1
            else
              return 1
            fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}  




workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]